consumes:
- application/json
definitions:
  Address:
    description: Address is a street address
    properties:
      city:
        description: City
        example: 8u0
        minLength: 1
        type: string
      number:
        description: Street number
        example: 1
        minimum: 1
        type: integer
      state:
        description: US State Code
        example: zx
        maxLength: 2
        minLength: 2
        type: string
      street:
        description: Street name
        example: 1of
        minLength: 1
        type: string
      zip:
        description: US Zip code
        example: 29093
        maximum: 99999
        minimum: 10000
        type: integer
    required:
    - number
    - street
    - city
    - state
    - zip
    title: Address
    type: object
  CourseMedia:
    description: CourseMedia is the media type used to render courses
    example:
      description: Sint consequatur et quo sint.
      end_time: 2011-05-03T21:18:55-07:00
      href: Rerum ratione veritatis.
      id: 4.7748744e+18
      location: Nihil ipsam et sit iure excepturi.
      name: Aut perferendis eveniet eos atque.
      start_time: 1995-02-23T04:30:24-08:00
    properties:
      description:
        description: Course description
        example: Voluptas atque.
        type: string
      end_time:
        description: Course end date/time
        example: 1993-06-23T07:55:55-07:00
        format: date-time
        type: string
      href:
        description: Course href
        example: Quis non.
        type: string
      id:
        description: Course identifier
        example: 5.139529e+18
        format: int64
        type: integer
      location:
        description: Course location
        example: eex
        minLength: 2
        type: string
      name:
        description: Course name
        example: dn6fr
        minLength: 3
        type: string
      start_time:
        description: Course start date/time
        example: 1975-02-01T11:28:31-08:00
        format: date-time
        type: string
    required:
    - id
    - href
    - name
    - start_time
    - end_time
    - location
    title: 'Mediatype identifier: application/vnd.goworkshop.course+json'
    type: object
  CourseMediaCollection:
    example:
    - description: Et fugiat qui cumque in et pariatur.
      end_time: 1979-10-26T03:34:23-07:00
      href: Autem cupiditate repudiandae id nobis incidunt voluptatem.
      id: 2.3582812e+17
      location: Aliquam architecto voluptatum earum quae.
      name: Architecto sint dolorem ipsam ut dolorem laborum.
      start_time: 1975-11-13T18:52:33-08:00
    - description: Esse quia blanditiis est.
      end_time: 2007-07-03T00:50:38-07:00
      href: Sit reiciendis.
      id: 6.50752e+18
      location: Dignissimos sed.
      name: Aut est autem et sunt ratione aliquid.
      start_time: 1986-12-26T02:22:12-08:00
    - description: Consequuntur atque quod corporis ea.
      end_time: 1977-10-24T10:09:29-07:00
      href: Ut ut voluptates labore quia doloribus vel.
      id: 6.3955094e+17
      location: Quisquam voluptatem maxime magnam ipsam.
      name: Molestiae odio omnis iste velit omnis aut.
      start_time: 1993-02-06T00:50:20-08:00
    items:
      $ref: '#/definitions/CourseMedia'
    title: 'Mediatype identifier: application/vnd.goworkshop.course+json; type=collection'
    type: array
  CreateCoursePayload:
    description: CoursePayload is the type used to create courses
    properties:
      description:
        description: Course description
        type: string
      end_time:
        description: Course end date/time
        format: date-time
        type: string
      location:
        description: Course location
        minLength: 2
        type: string
      name:
        description: Course name
        minLength: 3
        type: string
      start_time:
        description: Course start date/time
        format: date-time
        type: string
    required:
    - name
    - start_time
    - end_time
    - location
    title: CreateCoursePayload
    type: object
  CreateRegistrationPayload:
    description: RegistrationPayload is the type used to create registrations
    properties:
      address:
        $ref: '#/definitions/Address'
      course_href:
        description: The href to the course resource that describes the course being
          taught
        pattern: /courses/[0-9]+
        type: string
      first_name:
        description: Attendee first name
        minLength: 2
        type: string
      last_name:
        description: Attendee last name
        minLength: 2
        type: string
    required:
    - course_href
    - first_name
    - last_name
    - address
    title: CreateRegistrationPayload
    type: object
  Error:
    description: Error response media type
    example:
      code: invalid_value
      detail: Value of ID must be an integer
      id: 3F1FKVRR
      meta:
        timestamp: 1.458609e+09
      status: "400"
    properties:
      code:
        description: an application-specific error code, expressed as a string value.
        example: invalid_value
        type: string
      detail:
        description: a human-readable explanation specific to this occurrence of the
          problem.
        example: Value of ID must be an integer
        type: string
      id:
        description: a unique identifier for this particular occurrence of the problem.
        example: 3F1FKVRR
        type: string
      meta:
        additionalProperties: true
        description: a meta object containing non-standard meta-information about
          the error.
        example:
          timestamp: 1.458609e+09
        type: object
      status:
        description: the HTTP status code applicable to this problem, expressed as
          a string value.
        example: "400"
        type: string
    title: 'Mediatype identifier: application/vnd.api.error+json'
    type: object
  PatchCoursePayload:
    description: CoursePatchPayload is the type used to patch courses
    properties:
      description:
        description: Course description
        type: string
      end_time:
        description: Course end date/time
        format: date-time
        type: string
      location:
        description: Course location
        minLength: 2
        type: string
      start_time:
        description: Course start date/time
        format: date-time
        type: string
    title: PatchCoursePayload
    type: object
  PatchRegistrationPayload:
    description: RegistrationPatchPayload is the type used to patch registrations
    properties:
      address:
        $ref: '#/definitions/Address'
      first_name:
        description: Attendee first name
        minLength: 2
        type: string
      last_name:
        description: Attendee last name
        minLength: 2
        type: string
    title: PatchRegistrationPayload
    type: object
  RegistrationMedia:
    description: RegistrationMedia is the media type used to render registrations
    example:
      address:
        city: Dolor neque ipsam ipsum.
        number: 2.7522505e+18
        state: Nemo dolores quasi sapiente sapiente.
        street: Provident magni sed vel.
        zip: 1.5607754e+18
      course:
        description: Asperiores mollitia.
        end_time: 2016-05-03T03:06:19-07:00
        href: Repudiandae et.
        id: 1.6087963e+18
        location: Placeat voluptatem et excepturi non qui.
        name: Architecto fugiat vel ut odio.
        start_time: 1997-11-08T12:57:23-08:00
      first_name: Laboriosam debitis et.
      href: Assumenda et ipsa facilis minima sit.
      id: 8.498037e+18
      last_name: Quis ipsa adipisci quisquam natus molestias officia.
    properties:
      address:
        $ref: '#/definitions/Address'
      course:
        $ref: '#/definitions/CourseMedia'
      first_name:
        description: Attendee first name
        example: awyo
        minLength: 2
        type: string
      href:
        description: Registration href
        example: Ratione aut velit vel iure architecto autem.
        type: string
      id:
        description: Registration identifier
        example: 4.9063793e+18
        format: int64
        type: integer
      last_name:
        description: Attendee last name
        example: nt
        minLength: 2
        type: string
    required:
    - id
    - href
    - course
    - first_name
    - last_name
    - address
    title: 'Mediatype identifier: application/vnd.goworkshop.registration+json'
    type: object
  RegistrationMediaCollection:
    example:
    - address:
        city: Quidem repudiandae iusto ab.
        number: 7.079012e+17
        state: Vero est vero culpa.
        street: Sed ullam aliquid et voluptate.
        zip: 7.5499676e+18
      course:
        description: Facilis sunt voluptate repudiandae et provident occaecati.
        end_time: 2000-04-17T16:55:20-07:00
        href: Aut enim vel.
        id: 7.812577e+18
        location: Aut ipsa et minus.
        name: Vitae in dolore modi praesentium.
        start_time: 1973-06-14T23:55:55-07:00
      first_name: Eum id ab.
      href: Sequi magnam placeat incidunt architecto rerum sequi.
      id: 6.9869e+18
      last_name: Sint et quia.
    items:
      $ref: '#/definitions/RegistrationMedia'
    title: 'Mediatype identifier: application/vnd.goworkshop.registration+json; type=collection'
    type: array
host: localhost:8080
info:
  contact:
    email: gw@goa.design
    name: The GoWorkshop developers
  description: GoWorkshop is a simple example service that exposes a REST API
  license:
    name: The MIT License (MIT)
    url: https://github.com/gophercon/buildingapis/blob/master/LICENSE
  title: The Universal Workshop Service
  version: "1.0"
paths:
  /api/courses:
    get:
      description: |
        List all courses

        ** Required security scopes**:
      operationId: course#list
      parameters:
      - description: Filter by name
        in: query
        name: name
        required: false
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/CourseMediaCollection'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      schemes:
      - http
      summary: list course
      tags:
      - course
    post:
      description: |
        Create a new course

        ** Required security scopes**:
      operationId: course#create
      parameters:
      - description: CoursePayload is the type used to create courses
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/CreateCoursePayload'
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: Newly created course href
              pattern: /registrations/[0-9]+
              type: string
          schema:
            $ref: '#/definitions/CourseMedia'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      schemes:
      - http
      summary: create course
      tags:
      - course
  /api/courses/{id}:
    delete:
      description: |
        Delete a course

        ** Required security scopes**:
      operationId: course#delete
      parameters:
      - description: The course ID
        in: path
        minimum: 1
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
      schemes:
      - http
      summary: delete course
      tags:
      - course
    get:
      description: |
        Retrieve a course by ID

        ** Required security scopes**:
      operationId: course#show
      parameters:
      - description: The course ID
        in: path
        minimum: 1
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/CourseMedia'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
      schemes:
      - http
      summary: show course
      tags:
      - course
    patch:
      description: |
        Update a course using patch semantic

        ** Required security scopes**:
      operationId: course#patch
      parameters:
      - description: The course ID
        in: path
        minimum: 1
        name: id
        required: true
        type: integer
      - description: CoursePatchPayload is the type used to patch courses
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/PatchCoursePayload'
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
      schemes:
      - http
      summary: patch course
      tags:
      - course
  /api/registrations:
    get:
      description: |
        List all registrations

        ** Required security scopes**:
      operationId: registration#list
      parameters:
      - description: Filter by course
        in: query
        minimum: 1
        name: course_id
        required: false
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/RegistrationMediaCollection'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      schemes:
      - http
      summary: list registration
      tags:
      - registration
    post:
      description: |
        Create a new registration

        ** Required security scopes**:
      operationId: registration#create
      parameters:
      - description: RegistrationPayload is the type used to create registrations
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/CreateRegistrationPayload'
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: Newly created registration href
              pattern: /registrations/[0-9]+
              type: string
          schema:
            $ref: '#/definitions/RegistrationMedia'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
      schemes:
      - http
      summary: create registration
      tags:
      - registration
  /api/registrations/{id}:
    get:
      description: |
        Retrieve a registration by ID

        ** Required security scopes**:
      operationId: registration#show
      parameters:
      - description: The registration ID
        in: path
        minimum: 1
        name: id
        required: true
        type: integer
      - description: The view used to render the registration
        enum:
        - default
        - extended
        in: query
        name: view
        required: false
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/RegistrationMedia'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
      schemes:
      - http
      summary: show registration
      tags:
      - registration
    patch:
      description: |
        Update a registration using patch semantic

        ** Required security scopes**:
      operationId: registration#patch
      parameters:
      - description: The registration ID
        in: path
        minimum: 1
        name: id
        required: true
        type: integer
      - description: RegistrationPatchPayload is the type used to patch registrations
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/PatchRegistrationPayload'
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
      schemes:
      - http
      summary: patch registration
      tags:
      - registration
  /api/token:
    get:
      description: Login uses basic auth and on successful auth returns a JWT in the
        response "Authorization" header
      operationId: session#login
      responses:
        "204":
          description: No Content
          headers:
            Authorization:
              description: JWT that can be used to make requests to the registration
                and course endpoints
              type: string
        "401":
          description: Unauthorized
      schemes:
      - http
      security:
      - BasicAuth: []
      summary: login session
      tags:
      - session
  /swagger.json:
    get:
      description: API Swagger spec in JSON format
      operationId: public#/swagger.json
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
      schemes:
      - http
      summary: Download swagger/swagger.json
  /swagger.yaml:
    get:
      description: API Swagger spec in YAML format
      operationId: public#/swagger.yaml
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
      schemes:
      - http
      summary: Download swagger/swagger.yaml
  /swagger/{file}:
    get:
      description: Swagger UI
      operationId: public#/swagger/*file
      parameters:
      - description: Relative file path
        in: path
        name: file
        required: true
        type: string
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
        "404":
          description: File not found
          schema:
            $ref: '#/definitions/Error'
      schemes:
      - http
      summary: Download public/
produces:
- application/json
responses:
  NoContent:
    description: No Content
  NotFound:
    description: Not Found
  Unauthorized:
    description: Unauthorized
schemes:
- http
securityDefinitions:
  BasicAuth:
    description: User email and password authentication
    type: basic
  JWTAuth:
    description: |2-


      **Token URL**: http://localhost:8080/token
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
