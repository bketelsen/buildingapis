Building APIs in Go
Authorization
10 Jul 2016

Brian Ketelsen, Raphael Simon
bketelsen@goa.design
@bketelsen
raphael@goa.design
@rgsimon

* Authentication, Authorization, Access Control...

Semantic matters:

- Authentication: assert identity of API user (e.g. login)
- Authorization: allow or deny access to resources (e.g. access denied for non authenticated users)
- Access Control: rules that dictate who can do what (e.g. RBAC)

_Auth_ employed to mean both authentication and authorization.

* BasicAuth

Aging technique, not very secure, subject to replay attacks, requires HTTPS.

Credential consists of base 64 encoded username and password written to
`Authorization` header:

    Authorization: Basic <Base64(username:password)>

* API Key / Shared secret

Not very secure, only use as second level of defense (e.g. behind firewalls,
in VPC etc.), use HTTPS. Does not allow authentication (at least not easily).

Credential is secret token known by both parties passed as header or query
string value.

* JWT

Defines a way to send encrypted data ("claims") in a request, typically in the
form of a header:

   Authorization: Bearer <JWT>

where JWT is an encrypted JSON payload contains the claims and information
required by the other party to assert the origin of the token and decrypt it.

Note that the JWT standard does not define how auth is performed to obtain the
token in the first place.

The JWT claims may include any arbitrary data including a user identifier for
authentication, roles for access control, expiry date etc 

* OAuth2

OAuth2 enables 3 party auth where a client (e.g. Spotify app) may request access
to a service resource (e.g. Facebook wall) on behalf of the resource owner (e.g.
Facebook user).

     +--------+                               +---------------+
     |        |--(A)- Authorization Request ->|   Resource    |
     |        |                               |     Owner     |
     |        |<-(B)-- Authorization Grant ---|               |
     |        |                               +---------------+
     |        |                               +---------------+
     |        |--(C)-- Authorization Grant -->| Authorization |
     | Client |                               |     Server    |
     |        |<-(D)----- Access Token -------|               |
     |        |                               +---------------+
     |        |                               +---------------+
     |        |--(E)----- Access Token ------>|    Resource   |
     |        |                               |     Server    |
     |        |<-(F)--- Protected Resource ---|               |
     +--------+                               +---------------+

.link http://tools.ietf.org/html/rfc6749

* OAuth2 (2)

For services that need to integrate with OAuth2 providers (Facebook, Google,
Twitter etc.) use the golang OAuth2 client package.

.link https://github.com/golang/oauth2

For services that need to be OAuth2 providers themselves use the osin package
or the built-in goa support.

.link https://github.com/RangelReale/osin
.link https://goa.design

* What Should I Do?

For services that don't integrate with OAuth2 providers and don't need to
provide OAuth2 JWT is a good choice. Use basic auth for the initial
authentication then provide the client with a JWT.

As an improvement use a "2 legged OAuth2" scheme where the initial JWT
(refresh token) is only good for retrieving access tokens (which could also be
JWTs). These access tokens should be short lived, the client periodically
re-creates access tokens using the refresh token.
