HTTP in Go
Building APIs in Go
10 Jul 2016

Brian Ketelsen, Raphael Simon
bketelsen@goa.design
@bketelsen
raphael@goa.design
@rgsimon

* Serving HTTP in Go

Go has all the tools you need to build an API at any level of complexity in the Standard Library.

	Go has all the tools that you need in the std lib.

It's worth repeating.  

Many of us come from Django, Rails, Spring, DropWizard, etc. and feel like we have to have a framework.  Go has all the pieces you need baked in.

A common theme in the Go community is that dependencies are a burden that should be carefully considered before taking them on.  Frameworks are dependencies.

* Architecture
- package net/http 

	Contains everything related to client and server HTTP.

- "mux" ServeMux
	
	MUltipleXer - matches URI patterns to functions that will fulfil them.
	Path: /foo   Handler:  fooHandler()
	Path: /bar   Handler:  barHandler()

- Handler Interface
	
	An elegant feature of net/http - anything that responds to "ServeHTTP" can process requests.

* Architecture

One goroutine per incoming request.  Each goroutine services the request and terminates when the request is complete.  

- Really good performance because of how the scheduler handles IO waiting.
- One core can handle *many* requests.

* Routing

- DefaultServeMux is created for you if you create an http server.
- Add handlers by calling the `Handle` and `HandleFunc` functions

	http.Handle("/api", myAPIFunction)

	http.HandleFunc("/other", func(w http.ResponseWriter, r *http.Request) {
		fmt.Fprintf(w, "Hello World!")
	})

- ServeMux is a `Handler`, and you can nest them.  Turtles all the way down if you want.


* Error Handling

At the most simple level, you can send an error back to the client by using the Error() function.

	Signature:	http.Error(w http.ResponseWriter, error string, code int)
	
	http.Error(w, "Bad Things Happened", http.StatusInternalServerError)

You can use it just like this, but many choose to create wrapper functions.
.code samples/07-Go-HTTP.go



* Encoding/Decoding (MIME)

A web server should set a `Content-Type` header to tell the client how the data is encoded.  

Similarly a client will set an `Accept` header telling the web server what encoding it prefers.  

A correctly built client will always set an `Accept` header, and a correctly built server will always set the `Content-Type` header.


* Encoding - Detecting requested content type

Determine the client's preference by reading the `Accept` header from the http.Request.

.code samples/07-accept.go


* Encoding - Setting the content type in the response

	w.Header().Set("Content-Type", "application/json")

.code samples/07-setcontent.go

* Encoding - A better way


.code samples/07-encoder.go
