package main

import "html/template"

var serviceTemplate = template.Must(template.New("render").Parse(`// generated by genkit -- DO NOT EDIT
package {{.Package}}

import (
	"errors"

	"github.com/m4rw3r/uuid"
)

{{range .Types}}
// {{.Name}}Service represents operations on a {{.Name}}
type {{.Name}}Service interface {
	Create({{.Name}}) (string, error)
	Get(string) ({{.Name}}, error)
	Update({{.Name}}) error
	List() ([]{{.Name}}, error)
	Delete(string) error
}

func (t {{.Name}} ) String() string {
	return t.ID.String()
}

type {{.LowerName}}Service struct {
	{{.LowerName}}List map[string]{{.Name}}
}

func (t {{.LowerName}}Service) Create(c {{.Name}}) (string, error) {
	// Create a member here
	u, _ := uuid.V4()
	c.ID = u
	t.{{.LowerName}}List[u.String()] = c
	return u.String(), nil
}
func (t {{.LowerName}}Service)  Get(id string) ({{.Name}}, error) {
	// retrieve {{.LowerName}}
	member, ok := t.{{.LowerName}}List[id]
	if !ok {
		return member, ErrNotFound
	}
	return member, nil
}
func (t {{.LowerName}}Service) Update(i {{.Name}}) error {
	// update
	t.{{.LowerName}}List[i.ID.String()] = i
	return nil
}
func (t {{.LowerName}}Service)  List() ([]{{.Name}}, error) {
	// get all
	return []{{.Name}}{}, nil
}
func (t {{.LowerName}}Service) Delete(id string) error {
	// delete {{.LowerName}}
	delete(t.{{.LowerName}}List, id)
	return nil
}

// ErrExists is returned when the {{.LowerName}} already exists
var ErrExists = errors.New("{{.Name}} Exists")
var ErrNotFound = errors.New("{{.Name}} Not Found")

// ServiceMiddleware is a chainable behavior modifier for {{.Name}}Service.
type ServiceMiddleware func({{.Name}}Service) {{.Name}}Service
{{end}}`))
