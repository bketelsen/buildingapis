package main

import "html/template"

var instrumentingTemplate = template.Must(template.New("render").Parse(`// generated by genkit -- DO NOT EDIT
package {{.Package}}

import (
	"fmt"
	"time"

	"github.com/go-kit/kit/metrics"
)
{{range .Types}}
func instrumentingMiddleware(
	requestCount metrics.Counter,
	requestLatency metrics.Histogram,
) ServiceMiddleware {
	return func(next {{.Name}}Service) {{.Name}}Service {
		return instrmw{requestCount, requestLatency, next}
	}
}

type instrmw struct {
	requestCount   metrics.Counter
	requestLatency metrics.Histogram
	{{.Name}}Service
}

func (mw instrmw) Create(c {{.Name}}) (u string, err error) {
	defer func(begin time.Time) {
		methodField := metrics.Field{Key: "method", Value: "create"}
		errorField := metrics.Field{Key: "error", Value: fmt.Sprintf("%v", err)}
		mw.requestCount.With(methodField).With(errorField).Add(1)
		var durInt int64 = time.Since(begin).Nanoseconds() / 1e6
		mw.requestLatency.With(methodField).With(errorField).Observe(durInt)
	}(time.Now())

	u, err = mw.{{.Name}}Service.Create(c)
	return
}

func (mw instrmw) Get(id string) (m {{.Name}}, err error) {
	defer func(begin time.Time) {
		methodField := metrics.Field{Key: "method", Value: "get"}
		errorField := metrics.Field{Key: "error", Value: fmt.Sprintf("%v", err)}
		mw.requestCount.With(methodField).With(errorField).Add(1)
		var durInt int64 = time.Since(begin).Nanoseconds() / 1e6
		mw.requestLatency.With(methodField).With(errorField).Observe(durInt)
	}(time.Now())

	m, err = mw.{{.Name}}Service.Get(id)
	return
}

func (mw instrmw) Update(m {{.Name}}) (err error) {
	defer func(begin time.Time) {
		methodField := metrics.Field{Key: "method", Value: "update"}
		errorField := metrics.Field{Key: "error", Value: fmt.Sprintf("%v", err)}
		mw.requestCount.With(methodField).With(errorField).Add(1)
		var durInt int64 = time.Since(begin).Nanoseconds() / 1e6
		mw.requestLatency.With(methodField).With(errorField).Observe(durInt)
	}(time.Now())

	err = mw.{{.Name}}Service.Update(m)
	return
}

func (mw instrmw) List() (list []{{.Name}}, err error) {
	defer func(begin time.Time) {
		methodField := metrics.Field{Key: "method", Value: "list"}
		errorField := metrics.Field{Key: "error", Value: fmt.Sprintf("%v", err)}
		mw.requestCount.With(methodField).With(errorField).Add(1)
		var durInt int64 = time.Since(begin).Nanoseconds() / 1e6
		mw.requestLatency.With(methodField).With(errorField).Observe(durInt)
	}(time.Now())

	list, err = mw.{{.Name}}Service.List()
	return
}

func (mw instrmw) Delete(id string) (err error) {
	defer func(begin time.Time) {
		methodField := metrics.Field{Key: "method", Value: "delete"}
		errorField := metrics.Field{Key: "error", Value: fmt.Sprintf("%v", err)}
		mw.requestCount.With(methodField).With(errorField).Add(1)
		var durInt int64 = time.Since(begin).Nanoseconds() / 1e6
		mw.requestLatency.With(methodField).With(errorField).Observe(durInt)
	}(time.Now())

	err = mw.{{.Name}}Service.Delete(id)
	return
}
{{end}}`))
