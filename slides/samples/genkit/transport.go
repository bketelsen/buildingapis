package main

import "html/template"

var transportTemplate = template.Must(template.New("render").Parse(`// generated by genkit -- DO NOT EDIT
package {{.Package}}

import (
	"bytes"
	"encoding/json"
	"io/ioutil"
	"net/http"

	"golang.org/x/net/context"

	"github.com/go-kit/kit/endpoint"
)
{{range .Types}}
func makeCreateEndpoint(svc {{.Name}}Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(createRequest)
		id, err := svc.Create(req.{{.Name}})
		if err != nil {
			return createResponse{id, err.Error()}, nil
		}
		return createResponse{id, ""}, nil
	}
}
func makeGetEndpoint(svc {{.Name}}Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(getRequest)
		m, err := svc.Get(req.ID)
		if err != nil {
			return getResponse{m, err.Error()}, nil
		}
		return getResponse{m, ""}, nil
	}
}

func makeUpdateEndpoint(svc {{.Name}}Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(updateRequest)
		err := svc.Update(req.{{.Name}})
		if err != nil {
			return updateResponse{err.Error()}, nil
		}
		return updateResponse{""}, nil
	}
}

func makeListEndpoint(svc {{.Name}}Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		list, err := svc.List()
		if err != nil {
			return listResponse{list, err.Error()}, nil
		}
		return listResponse{list, ""}, nil
	}
}
func makeDeleteEndpoint(svc {{.Name}}Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(deleteRequest)
		err := svc.Delete(req.ID)
		if err != nil {
			return deleteResponse{err.Error()}, nil
		}
		return deleteResponse{""}, nil
	}
}
func decodeCreateRequest(r *http.Request) (interface{}, error) {
	var request createRequest
	if err := json.NewDecoder(r.Body).Decode(&request); err != nil {
		return nil, err
	}
	return request, nil
}

func decodeCreateResponse(r *http.Response) (interface{}, error) {
	var response createResponse
	if err := json.NewDecoder(r.Body).Decode(&response); err != nil {
		return nil, err
	}
	return response, nil
}
func decodeGetRequest(r *http.Request) (interface{}, error) {
	var request getRequest
	if err := json.NewDecoder(r.Body).Decode(&request); err != nil {
		return nil, err
	}
	return request, nil
}

func decodeGetResponse(r *http.Response) (interface{}, error) {
	var response getResponse
	if err := json.NewDecoder(r.Body).Decode(&response); err != nil {
		return nil, err
	}
	return response, nil
}
func decodeUpdateRequest(r *http.Request) (interface{}, error) {
	var request updateRequest
	if err := json.NewDecoder(r.Body).Decode(&request); err != nil {
		return nil, err
	}
	return request, nil
}

func decodeUpdateResponse(r *http.Response) (interface{}, error) {
	var response updateResponse
	if err := json.NewDecoder(r.Body).Decode(&response); err != nil {
		return nil, err
	}
	return response, nil
}
func decodeListRequest(r *http.Request) (interface{}, error) {
	var request listRequest
	if err := json.NewDecoder(r.Body).Decode(&request); err != nil {
		return nil, err
	}
	return request, nil
}

func decodeListResponse(r *http.Response) (interface{}, error) {
	var response listResponse
	if err := json.NewDecoder(r.Body).Decode(&response); err != nil {
		return nil, err
	}
	return response, nil
}

func decodeDeleteRequest(r *http.Request) (interface{}, error) {
	var request deleteRequest
	if err := json.NewDecoder(r.Body).Decode(&request); err != nil {
		return nil, err
	}
	return request, nil
}

func decodeDeleteResponse(r *http.Response) (interface{}, error) {
	var response deleteResponse
	if err := json.NewDecoder(r.Body).Decode(&response); err != nil {
		return nil, err
	}
	return response, nil
}
func encodeResponse(w http.ResponseWriter, response interface{}) error {
	return json.NewEncoder(w).Encode(response)
}

func encodeRequest(r *http.Request, request interface{}) error {
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(request); err != nil {
		return err
	}
	r.Body = ioutil.NopCloser(&buf)
	return nil
}

type createRequest struct {
	{{.Name}} {{.Name}} ` + "`json:'{{.LowerName}}'`" + `
}

type createResponse struct {
	ID  string ` + "`json:'id'`" + `
	Err string ` + "`json:'err,omitempty'`" + `
}

type getRequest struct {
	ID string ` + "`json:'id'`" + `
}

type getResponse struct {
	{{.Name}} {{.Name}} ` + "`json:'{{.LowerName}}'`" + `
	Err string ` + "`json:'err,omitempty'`" + `
}

type updateRequest struct {
	{{.Name}} {{.Name}} ` + "`json:'{{.LowerName}}'`" + `
}

type updateResponse struct {
	Err string ` + "`json:'err,omitempty'`" + `
}

type listRequest struct {
}

type listResponse struct {
	{{.Name}}List []{{.Name}}  ` + "`json:'{{.LowerName}}list'`" + ` 
	Err string ` + "`json:'err,omitempty'`" + `
}

type deleteRequest struct {
	ID string ` + "`json:'id'`" + `
}

type deleteResponse struct {
	Err string ` + "`json:'err,omitempty'`" + `
}
{{end}}`))
