// generated by genkit -- DO NOT EDIT
package example

import (
	"time"

	"github.com/Sirupsen/logrus"
)

func loggingMiddleware(logger *logrus.Entry) ServiceMiddleware {
	return func(next UserService) UserService {
		return logmw{logger, next}
	}
}

type logmw struct {
	logger *logrus.Entry
	UserService
}

func (mw logmw) Create(c User) (id string, err error) {
	defer func(begin time.Time) {
		mw.logger.WithFields(logrus.Fields{
			"method": "create",
			"user": c,
			"id":     id,
			"err":    err,
			"took":   time.Since(begin),
		}).Info("request completed")
	}(time.Now())

	id, err = mw.UserService.Create(c)
	return
}

func (mw logmw) Get(id string) (m User, err error) {
	defer func(begin time.Time) {
		mw.logger.WithFields(logrus.Fields{
			"method": "get",
			"User": m,
			"id":     id,
			"err":    err,
			"took":   time.Since(begin),
		}).Info("request completed")
	}(time.Now())

	m, err = mw.UserService.Get(id)
	return
}

func (mw logmw) Update(m User) (err error) {
	defer func(begin time.Time) {
		mw.logger.WithFields(logrus.Fields{
			"method": "update",
			"User": m,
			"err":    err,
			"took":   time.Since(begin),
		}).Info("request completed")
	}(time.Now())

	err = mw.UserService.Update(m)
	return
}

func (mw logmw) List() (list []User, err error) {
	defer func(begin time.Time) {
		mw.logger.WithFields(logrus.Fields{
			"method": "list",
			"err":    err,
			"took":   time.Since(begin),
		}).Info("request completed")
	}(time.Now())

	list, err = mw.UserService.List()
	return
}

func (mw logmw) Delete(id string) (err error) {
	defer func(begin time.Time) {
		mw.logger.WithFields(logrus.Fields{
			"method": "delete",
			"id":     id,
			"err":    err,
			"took":   time.Since(begin),
		}).Info("request completed")
	}(time.Now())

	err = mw.UserService.Delete(id)
	return
}