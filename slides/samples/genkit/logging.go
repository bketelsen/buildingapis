package main

import "html/template"

var loggingTemplate = template.Must(template.New("render").Parse(`// generated by genkit -- DO NOT EDIT
package {{.Package}}

import (
	"time"

	"github.com/Sirupsen/logrus"
)
{{range .Types}}
func loggingMiddleware(logger *logrus.Entry) ServiceMiddleware {
	return func(next {{.Name}}Service) {{.Name}}Service {
		return logmw{logger, next}
	}
}

type logmw struct {
	logger *logrus.Entry
	{{.Name}}Service
}

func (mw logmw) Create(c {{.Name}}) (id string, err error) {
	defer func(begin time.Time) {
		mw.logger.WithFields(logrus.Fields{
			"method": "create",
			"{{.LowerName}}": c,
			"id":     id,
			"err":    err,
			"took":   time.Since(begin),
		}).Info("request completed")
	}(time.Now())

	id, err = mw.{{.Name}}Service.Create(c)
	return
}

func (mw logmw) Get(id string) (m {{.Name}}, err error) {
	defer func(begin time.Time) {
		mw.logger.WithFields(logrus.Fields{
			"method": "get",
			"{{.Name}}": m,
			"id":     id,
			"err":    err,
			"took":   time.Since(begin),
		}).Info("request completed")
	}(time.Now())

	m, err = mw.{{.Name}}Service.Get(id)
	return
}

func (mw logmw) Update(m {{.Name}}) (err error) {
	defer func(begin time.Time) {
		mw.logger.WithFields(logrus.Fields{
			"method": "update",
			"{{.Name}}": m,
			"err":    err,
			"took":   time.Since(begin),
		}).Info("request completed")
	}(time.Now())

	err = mw.{{.Name}}Service.Update(m)
	return
}

func (mw logmw) List() (list []{{.Name}}, err error) {
	defer func(begin time.Time) {
		mw.logger.WithFields(logrus.Fields{
			"method": "list",
			"err":    err,
			"took":   time.Since(begin),
		}).Info("request completed")
	}(time.Now())

	list, err = mw.{{.Name}}Service.List()
	return
}

func (mw logmw) Delete(id string) (err error) {
	defer func(begin time.Time) {
		mw.logger.WithFields(logrus.Fields{
			"method": "delete",
			"id":     id,
			"err":    err,
			"took":   time.Since(begin),
		}).Info("request completed")
	}(time.Now())

	err = mw.{{.Name}}Service.Delete(id)
	return
}{{end}}`))
